;%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
;LAM Technologies - 50019 Sesto Fiorentino (FI) ITALY - www.lamtechnologies.com
;%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
;
;UDP commander 1.72
;
; >>> Application Program details:
;
DESCRIPTION = ""
   REVISION = "0.0"
       NOTE = ""
;
; >>> Drive configuration - Fault:
;
   UNDERVOLTAGE = "Automatic"
    OVERVOLTAGE = "Automatic"
OVERTEMPERATURE = "Automatic"
    PH_PH_SHORT = "ENABLE"
   PH_GND_SHORT = "ENABLE"
   PH_VPP_SHORT = "ENABLE"
    PH_A_BROKEN = "ENABLE"
    PH_B_BROKEN = "ENABLE"
;
; >>> Drive configuration - I Shape:
;
 ISHAPE = "0"
IOFFSET = "0"
;
; >>> Drive configuration - Acceleration and Deceleration Coefficient:
;
ACCDECF = "1"
;
; >>> Drive configuration - User variables Retentive:
;
RETUVAR = "1"
;
; >>> Drive configuration - Analog Input used as Digital Input Threshold:
;
AI0SLG = "1.5"
AI1SLG = "1.5"
;
; >>> User Variable:
;
VARIABLE = "state", 1    ;40961(0xA001)
VARIABLE = "home_done", 1    ;40962(0xA002)
VARIABLE = "ismoving_flag", 1    ;40963(0xA003)
VARIABLE = "Max_TargetPos", 4    ;40964(0xA004)
VARIABLE = "status_state", 1    ;40966(0xA006)
VARIABLE = "saved_config", 1    ;40967(0xA007)
VARIABLE = "request_state", 1    ;40968(0xA008)
VARIABLE = "req_log_state", 1    ;40969(0xA009)
VARIABLE = "vel_home", 2    ;40970(0xA00A)
VARIABLE = "prev_analoginput0", 2    ;40971(0xA00B)
VARIABLE = "LastPosition", 4    ;40972(0xA00C)
VARIABLE = "check_Enc", 1    ;40974(0xA00E)
VARIABLE = "Encoder_Min", 1    ;40975(0xA00F)
VARIABLE = "Encoder_Max", 2    ;40976(0xA010)
VARIABLE = "Check_SetPos", 1    ;40977(0xA011)
VARIABLE = "PhaseCurr_User", 1    ;40978(0xA012)
VARIABLE = "Analog_Log", 1    ;40979(0xA013)
VARIABLE = "Delta_Analog_Pos", 1    ;40980(0xA014)
VARIABLE = "Delta_Analog_Neg", 1    ;40981(0xA015)
VARIABLE = "Delay_CheckRot", 1    ;40982(0xA016)
;
; >>> Application Program block:
;
;---------------------------------------------------------------> Block:1
Assign {
  bEnable = INACTIVE_BOOL
  ControlMode = 0
  PhaseCurrent = PhaseCurr_User
  home_done = 30
}
;
;
;---------------------------------------------------------------> Block:2
Assign {
  state = 0
  request_state = 0
  req_log_state = 0
  status_state = 0
}
;
;
;---------------------------------------------------------------> Block:3
Assign status_state = 6 if bUVarLoaded = 0
;
;
;---------------------------------------------------------------> Block:4
ErrorStart:
  Call ResetDriver if status_state = 7
;
;
;---------------------------------------------------------------> Block:5
  Jump to ErrorStart if status_state >= 6
;
;
;---------------------------------------------------------------> Block:6
  Jump to initDefault if saved_config = 0
;
;
;---------------------------------------------------------------> Block:7
mainLoop:
Assign {
  check_Enc = 0
}
;
;
;---------------------------------------------------------------> Block:8
Assign check_Enc = 1 if AnalogInput(0) > Encoder_Min
;
;
;---------------------------------------------------------------> Block:9
Assign check_Enc = 0 if AnalogInput(0) > Encoder_Max
;
;
;---------------------------------------------------------------> Block:10
  Call stopMotor if check_Enc = 0
;
;
;---------------------------------------------------------------> Block:11
  Call ResetDriver if status_state = 7
;
;
;---------------------------------------------------------------> Block:12
Assign Encoder_Min = AnalogInput(0) if status_state = 8
;
;
;---------------------------------------------------------------> Block:13
Assign Encoder_Max = AnalogInput(0) if status_state = 9
;
;
;---------------------------------------------------------------> Block:14
Assign status_state = 0 if status_state >= 8
;
;
;---------------------------------------------------------------> Block:15
  Jump to mainLoop if check_Enc = 0
;
;
;---------------------------------------------------------------> Block:16
  Call selectState if status_state = 0
;
;
;---------------------------------------------------------------> Block:17
  Jump to setConfig if state = 2
;
;
;---------------------------------------------------------------> Block:18
  Jump to move if state = 4
;
;
;---------------------------------------------------------------> Block:19
  Jump to move if state = 17
;
;
;---------------------------------------------------------------> Block:20
  Jump to resetPosition if state = 6
;
;
;---------------------------------------------------------------> Block:21
  Jump to mainLoop always
;
;
;---------------------------------------------------------------> Block:22
selectState:
  Logic req_log_state = request_state AND home_done
;
;
;---------------------------------------------------------------> Block:23
Assign status_state = 1 if req_log_state <> 0
;
;
;---------------------------------------------------------------> Block:24
Assign state = request_state if req_log_state <> 0
;
;
;---------------------------------------------------------------> Block:25
Assign request_state = 0 if req_log_state <> 0
;
;
;---------------------------------------------------------------> Block:26
  Return
;
;
;---------------------------------------------------------------> Block:27
move:
  Call initMov if status_state = 1
;
;
;---------------------------------------------------------------> Block:28
  Call checkRotation if status_state = 2
;
;
;---------------------------------------------------------------> Block:29
  Call stopMotor if ismoving_flag = 0
;
;
;---------------------------------------------------------------> Block:30
  Call checkMoveDone if status_state = 3
;
;
;---------------------------------------------------------------> Block:31
  Jump to mainLoop always
;
;
;---------------------------------------------------------------> Block:32
initMov:
Assign ControlMode = 0 if state = 17
;
;
;---------------------------------------------------------------> Block:33
Assign ControlMode = 1 if state = 4
;
;
;---------------------------------------------------------------> Block:34
Assign {
  prev_analoginput0 = AnalogInput(0)
  ismoving_flag = 0
  Check_SetPos = 0
}
;
;
;---------------------------------------------------------------> Block:35
Assign {
  status_state = 2
}
;
;
;---------------------------------------------------------------> Block:36
Assign RefVel = vel_home if state = 4
;
;
;---------------------------------------------------------------> Block:37
Assign Check_SetPos = 1 if TargetPos >= 0
;
;
;---------------------------------------------------------------> Block:38
Assign Check_SetPos = 0 if TargetPos > Max_TargetPos
;
;
;---------------------------------------------------------------> Block:39
Assign bEnable = ACTIVE_BOOL if Check_SetPos = 1
;
;
;---------------------------------------------------------------> Block:40
Assign bEnable = ACTIVE_BOOL if state = 4
;
;
;---------------------------------------------------------------> Block:41
  Return
;
;
;---------------------------------------------------------------> Block:42
checkRotation:
  Wait for Delay_CheckRot ms
;
;
;---------------------------------------------------------------> Block:43
  Resolve Analog_Log = (-1 * prev_analoginput0) + AnalogInput(0)
;
;
;---------------------------------------------------------------> Block:44
Assign {
  ismoving_flag = 0
}
;
;
;---------------------------------------------------------------> Block:45
Assign ismoving_flag = 1 if Analog_Log > Delta_Analog_Pos
;
;
;---------------------------------------------------------------> Block:46
Assign ismoving_flag = 1 if Analog_Log < Delta_Analog_Neg
;
;
;---------------------------------------------------------------> Block:47
Assign {
  prev_analoginput0 = AnalogInput(0)
}
;
;
;---------------------------------------------------------------> Block:48
  Return
;
;
;---------------------------------------------------------------> Block:49
stopMotor:
Assign {
  RefVel = 0
}
;
;
;---------------------------------------------------------------> Block:50
Assign status_state = 3 if bInStop = 1
;
;
;---------------------------------------------------------------> Block:51
Assign bEnable = INACTIVE_BOOL if bInStop = 1
;
;
;---------------------------------------------------------------> Block:52
Assign home_done = 31 if state = 4
;
;
;---------------------------------------------------------------> Block:53
  Return
;
;
;---------------------------------------------------------------> Block:54
checkMoveDone:
Assign Position = 0 if state = 4
;
;
;---------------------------------------------------------------> Block:55
Assign TargetPos = 0 if state = 4
;
;
;---------------------------------------------------------------> Block:56
Assign status_state = 4 if TargetPos <> Position
;
;
;---------------------------------------------------------------> Block:57
Assign status_state = 5 if TargetPos = Position
;
;
;---------------------------------------------------------------> Block:58
Assign {
  LastPosition = Position
  state = 0
}
;
;
;---------------------------------------------------------------> Block:59
  Return
;
;
;---------------------------------------------------------------> Block:60
resetPosition:
Assign {
  LastPosition = 0
  Position = 0
  TargetPos = Position
}
;
;
;---------------------------------------------------------------> Block:61
Assign {
  status_state = 5
  state = 0
}
;
;
;---------------------------------------------------------------> Block:62
  Jump to mainLoop always
;
;
;---------------------------------------------------------------> Block:63
initDefault:
Assign {
  vel_home = 240
  PhaseCurrent = 12
  PhaseCurr_User = 12
}
;
;
;---------------------------------------------------------------> Block:64
Assign {
  MaxVel = 240
  Acceleration = 1000
  Deceleration = 1000
}
;
;
;---------------------------------------------------------------> Block:65
Assign {
  Encoder_Min = 0
  Encoder_Max = 1023
  Delay_CheckRot = 50
}
;
;
;---------------------------------------------------------------> Block:66
Assign {
  Delta_Analog_Pos = 1
  Delta_Analog_Neg = -1
}
;
;
;---------------------------------------------------------------> Block:67
  Jump to mainLoop always
;
;
;---------------------------------------------------------------> Block:68
setConfig:
Assign {
  bEnable = INACTIVE_BOOL
  saved_config = 1
  status_state = 2
}
;
;
;---------------------------------------------------------------> Block:69
Assign {
  PhaseCurr_User = PhaseCurrent
  LastPosition = Position
}
;
;
;---------------------------------------------------------------> Block:70
  Resolve Delta_Analog_Neg = -1 * Delta_Analog_Pos
;
;
;---------------------------------------------------------------> Block:71
Function Save Variables in Flash
;
;
;---------------------------------------------------------------> Block:72
Assign {
  bEnable = ACTIVE_BOOL
}
;
;
;---------------------------------------------------------------> Block:73
Assign status_state = 4 if bUVarSaved = 0
;
;
;---------------------------------------------------------------> Block:74
Assign status_state = 5 if bUVarSaved = 1
;
;
;---------------------------------------------------------------> Block:75
Assign status_state = 6 if bUVarLoaded = 0
;
;
;---------------------------------------------------------------> Block:76
  Jump to mainLoop always
;
;
;---------------------------------------------------------------> Block:77
ResetDriver:
Function Reset User Program
;
;
;---------------------------------------------------------------> Block:78
  Return
;
;
;
;%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
;LAM Technologies - 50019 Sesto Fiorentino (FI) ITALY - www.lamtechnologies.com
;%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
;2/9/2017 11:58:02 AM
